{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/A924522/Downloads/library-angular-main/library-angular-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.username = '';\n    this.userId = '';\n  }\n  login(username, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.username = username;\n        const response = yield _this.http.post('http://localhost:3000/auth/login', {\n          username,\n          password\n        }).toPromise();\n        _this.userId = response.payload.userId;\n        _this.userData = response;\n        localStorage.setItem(\"sub\", JSON.stringify(response.payload.sub));\n        localStorage.setItem(\"name\", JSON.stringify(response.payload.username));\n        localStorage.setItem(\"email\", JSON.stringify(response.payload.email));\n        return response;\n      } catch (error) {\n        console.error('Error logging in:', error);\n        throw error;\n      }\n    })();\n  }\n  signUp(name, email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        console.log(name);\n        console.log(email);\n        const response = yield _this2.http.post('http://localhost:3000/users', {\n          name,\n          email,\n          password\n        }).toPromise();\n        return response;\n      } catch (error) {\n        console.error('Error signing up in:', error);\n        throw error;\n      }\n    })();\n  }\n  logout() {\n    // Clear any stored user data (if any)\n    // Optionally, you may want to clear tokens or other user information\n    // For simplicity, we'll leave this empty in this example\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthenticationService","constructor","http","username","userId","login","password","_this","_asyncToGenerator","response","post","toPromise","payload","userData","localStorage","setItem","JSON","stringify","sub","email","error","console","signUp","name","_this2","log","logout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\A924522\\Downloads\\library-angular-main\\library-angular-main\\src\\app\\login\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  username: string = '';\r\n  userId: string = '';\r\n  userData: any;\r\n  async login(username: string, password: string): Promise<any> {\r\n    try {\r\n      this.username = username;\r\n      const response = await this.http.post<any>('http://localhost:3000/auth/login', { username, password }).toPromise();\r\n      this.userId = response.payload.userId;\r\n      this.userData = response;\r\n      localStorage.setItem(\"sub\", JSON.stringify(response.payload.sub));\r\n      localStorage.setItem(\"name\", JSON.stringify(response.payload.username));\r\n      localStorage.setItem(\"email\", JSON.stringify(response.payload.email));\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error logging in:', error);\r\n      throw error; \r\n    }\r\n  }\r\n\r\n  async signUp(name: string, email: string, password: string): Promise<any> {\r\n    try {\r\n        console.log(name);\r\n        console.log(email);\r\n\r\n      const response = await this.http.post<any>('http://localhost:3000/users', { name, email, password }).toPromise();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error signing up in:', error);\r\n      throw error; \r\n    }\r\n  }\r\n\r\n\r\n  logout() {\r\n    // Clear any stored user data (if any)\r\n    // Optionally, you may want to clear tokens or other user information\r\n    // For simplicity, we'll leave this empty in this example\r\n  }\r\n}"],"mappings":";;;AAQA,OAAM,MAAOA,qBAAqB;EAEhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,MAAM,GAAW,EAAE;EAFqB;EAIlCC,KAAKA,CAACF,QAAgB,EAAEG,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC5C,IAAI;QACFD,KAAI,CAACJ,QAAQ,GAAGA,QAAQ;QACxB,MAAMM,QAAQ,SAASF,KAAI,CAACL,IAAI,CAACQ,IAAI,CAAM,kCAAkC,EAAE;UAAEP,QAAQ;UAAEG;QAAQ,CAAE,CAAC,CAACK,SAAS,EAAE;QAClHJ,KAAI,CAACH,MAAM,GAAGK,QAAQ,CAACG,OAAO,CAACR,MAAM;QACrCG,KAAI,CAACM,QAAQ,GAAGJ,QAAQ;QACxBK,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACG,OAAO,CAACM,GAAG,CAAC,CAAC;QACjEJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACG,OAAO,CAACT,QAAQ,CAAC,CAAC;QACvEW,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACG,OAAO,CAACO,KAAK,CAAC,CAAC;QACrE,OAAOV,QAAQ;OAChB,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzC,MAAMA,KAAK;;IACZ;EACH;EAEME,MAAMA,CAACC,IAAY,EAAEJ,KAAa,EAAEb,QAAgB;IAAA,IAAAkB,MAAA;IAAA,OAAAhB,iBAAA;MACxD,IAAI;QACAa,OAAO,CAACI,GAAG,CAACF,IAAI,CAAC;QACjBF,OAAO,CAACI,GAAG,CAACN,KAAK,CAAC;QAEpB,MAAMV,QAAQ,SAASe,MAAI,CAACtB,IAAI,CAACQ,IAAI,CAAM,6BAA6B,EAAE;UAAEa,IAAI;UAAEJ,KAAK;UAAEb;QAAQ,CAAE,CAAC,CAACK,SAAS,EAAE;QAChH,OAAOF,QAAQ;OAChB,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,MAAMA,KAAK;;IACZ;EACH;EAGAM,MAAMA,CAAA;IACJ;IACA;IACA;EAAA;EACD,QAAAC,CAAA,G;qBAxCU3B,qBAAqB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBhC,qBAAqB;IAAAiC,OAAA,EAArBjC,qBAAqB,CAAAkC,IAAA;IAAAC,UAAA,EAFpB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}