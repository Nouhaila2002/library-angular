{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/A924522/Downloads/library-angular-main/library-angular-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserValue = '';\n  }\n  login(username, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.currentUserValue = username;\n        const response = yield _this.http.post('http://localhost:3000/auth/login', {\n          username,\n          password\n        }).toPromise();\n        return response;\n      } catch (error) {\n        console.error('Error logging in:', error);\n        throw error;\n      }\n    })();\n  }\n  logout() {\n    // Clear any stored user data (if any)\n    // Optionally, you may want to clear tokens or other user information\n    // For simplicity, we'll leave this empty in this example\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthenticationService","constructor","http","currentUserValue","login","username","password","_this","_asyncToGenerator","response","post","toPromise","error","console","logout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\A924522\\Downloads\\library-angular-main\\library-angular-main\\src\\app\\login\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  currentUserValue: string = '';\r\n\r\n  async login(username: string, password: string): Promise<any> {\r\n    try {\r\n      this.currentUserValue = username;\r\n      const response = await this.http.post<any>('http://localhost:3000/auth/login', { username, password }).toPromise();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error logging in:', error);\r\n      throw error; \r\n    }\r\n  }\r\n\r\n  logout() {\r\n    // Clear any stored user data (if any)\r\n    // Optionally, you may want to clear tokens or other user information\r\n    // For simplicity, we'll leave this empty in this example\r\n  }\r\n}"],"mappings":";;;AAOA,OAAM,MAAOA,qBAAqB;EAEhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB,KAAAC,gBAAgB,GAAW,EAAE;EADW;EAGlCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC5C,IAAI;QACFD,KAAI,CAACJ,gBAAgB,GAAGE,QAAQ;QAChC,MAAMI,QAAQ,SAASF,KAAI,CAACL,IAAI,CAACQ,IAAI,CAAM,kCAAkC,EAAE;UAAEL,QAAQ;UAAEC;QAAQ,CAAE,CAAC,CAACK,SAAS,EAAE;QAClH,OAAOF,QAAQ;OAChB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzC,MAAMA,KAAK;;IACZ;EACH;EAEAE,MAAMA,CAAA;IACJ;IACA;IACA;EAAA;EACD,QAAAC,CAAA,G;qBApBUf,qBAAqB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBpB,qBAAqB;IAAAqB,OAAA,EAArBrB,qBAAqB,CAAAsB,IAAA;IAAAC,UAAA,EAFpB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}